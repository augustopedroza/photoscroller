package com.pedroza.photoscroller.photoscroller.view;

import android.arch.lifecycle.ViewModelProviders;
import android.content.Intent;
import android.databinding.DataBindingUtil;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.content.FileProvider;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.ShareActionProvider;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.ImageView;

import com.pedroza.photoscroller.photoscroller.BuildConfig;
import com.pedroza.photoscroller.photoscroller.R;
import com.pedroza.photoscroller.photoscroller.databinding.ActivityPhotoBinding;
import com.pedroza.photoscroller.photoscroller.viewmodel.PhotoViewModel;
import com.pedroza.photoscroller.photoscroller.viewmodel.factories.PhotoViewModelFactory;

import java.io.File;

import javax.inject.Inject;

import butterknife.BindView;
import butterknife.ButterKnife;
import dagger.android.AndroidInjection;

/**
 * Created by pedroza on 7/25/17.
 */

public class PhotoActivity extends AppCompatActivity {

    public static final String PHOTO_ID = "PHOTO_ID";

    @Inject
    PhotoViewModelFactory mViewModelFactory;

    private PhotoViewModel mViewModel;
    private ShareActionProvider mShareActionProvider;

    @BindView(R.id.photo_image_view)
    protected ImageView mImageView;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        AndroidInjection.inject(this);
        super.onCreate(savedInstanceState);

        //
        // The autogenerated binding class is one of the weak points of the data binding infrastructure
        // according to the documentation: "By default, a Binding class will be generated based on the
        // name of the layout file, converting it to Pascal case and suffixing "Binding" to it. The
        // above layout file was main_activity.xml so the generate class was MainActivityBinding".
        // I personally dislike this obscure approach but I choose to use to leverage the power of databinding.
        //

        ActivityPhotoBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_photo);
        ButterKnife.bind(this);
        Bundle bundle = getIntent().getExtras();
        String photoId =  bundle.getString(PHOTO_ID);

        mViewModel = ViewModelProviders.of(this, mViewModelFactory).get(PhotoViewModel.class);
        mViewModel.setPhotoId(photoId);

        binding.setViewModel(mViewModel);
    }
}

